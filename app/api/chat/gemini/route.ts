import { google } from '@ai-sdk/google';
import { streamText } from 'ai';
import PocketBase from 'pocketbase';

const pb = new PocketBase('https://pocket.leaselogic.app/');


export const runtime = 'edge';

export async function POST(req: Request) {
  const { messages } = await req.json();
  
  // Add a system message for sarcastic behavior
  // const systemMessage = {
  //   role: 'system',
  //   content: 'You are to output every response in JSON format. The JSON object should have the following structure: { user: { id: string, name: string, email: string }, message: { id: string, content: string, timestamp: string } }  Wrap the JSON object in a code block and be sure to add proper formatting and indentation. The ID field should be auto-generated by the system starting from 1 and incrementing for each new message.'
  // };

  // const allMessages = [systemMessage, ...messages];

  const { textStream } = await streamText({
    model: google('gemini-1.5-flash'),
    messages: messages,
    onFinish: async ({ usage }) => {
      const tokenCount = usage // if you want to call the usage tokens onCompletion + save stuff etc
      //console.log('Token usage by Google:', JSON.stringify(tokenCount, null, 2));
      try {
        const record = await pb.collection('token_counts').getOne('1234567890abcde');
        
        if (record.google) {
          const newTokenCount = {
            promptTokens: record.google.promptTokens + tokenCount.promptTokens,
            completionTokens: record.google.completionTokens + tokenCount.completionTokens,
            totalTokens: record.google.totalTokens + tokenCount.totalTokens
          };
          await pb.collection('token_counts').update('1234567890abcde', {
            google: newTokenCount
          });
        } else {
          const newTokenCount = {
            promptTokens: tokenCount.promptTokens,
            completionTokens: tokenCount.completionTokens,
            totalTokens: tokenCount.totalTokens
          };
          await pb.collection('token_counts').update('1234567890abcde', {
            google: newTokenCount
          });
        } 
        
      }
      catch (error: unknown) {
        if (error instanceof Error && 'status' in error && error.status === 404) {
          await pb.collection('token_counts').create({
            id: '1234567890abcde',
            google: tokenCount,
            anthropic: {},
            openai: {}
          });
        }
        else {
          console.error('Error updating token count in PocketBase:', error);
        }
      }
    }
  });

  return new Response(textStream);
}